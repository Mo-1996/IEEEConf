swirl()
library(swirl)
swirl()
swirl()
1
swirl()
back()
info()
main()
info()
bye()
swrirl()
swrirl()
library(swirl)
swrirl()
swirl()
info()
nxt()
ls()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
install.packages("faraway")
swirl()
install.packages("faraway")
unlink(‘/home/saeid/R/x86_64-pc-linux-gnu-library/3.2’, recursive = TRUE)
unlink("/home/saeid/R/x86_64-pc-linux-gnu-library/3.2", recursive = TRUE)
install.packages("faraway")
install.packages("faraway")
install.packages("faraway",dependencies = TRUE)
link(‘/home/saeid/R/x86_64-pc-linux-gnu-library/3.2’, recursive = TRUE)
link("/home/saeid/R/x86_64-pc-linux-gnu-library/3.2", recursive = TRUE)
install.packages("BCSub")
a = 2
data(sampson)
library(statnet)
update_statnet()
data("faux.magnolia.high")
a = data("faux.magnolia.high")
a
b = faux.magnolia.high
b
a[1]
a[0]
b
plot(a)
plot(b)
data("faux.magnolia.high")
plot(fmh, displayisolates = FALSE, vertex.cex = 0.7)
plot(a, displayisolates = FALSE, vertex.cex = 0.7)
plot(b, displayisolates = FALSE, vertex.cex = 0.7)
plot(b, displayisolates = FALSE, vertex.cex = 0.9)
plot(b, displayisolates = FALSE, vertex.cex = 0.1)
plot(b, displayisolates = FALSE, vertex.cex = 0.3)
plot(b, displayisolates = FALSE, vertex.cex = 0.7)
plot(b, displayisolates = TRUE, vertex.cex = 0.7)
plot(b, displayisolates = FALSE, vertex.cex = 0.7)
table(component.dist(fmh)$csize)
table(component.dist(b)$csize)
table(component.dist(b)$csize)
b
summary(b)
b
summary(b)
plot(fmh, displayisolates = FALSE, vertex.col = "Grade", vertex.cex = 0.7)
plot(b, displayisolates = FALSE, vertex.col = "Grade", vertex.cex = 0.7)
b.degreedist <- table(degree(b, cmode = "indegree"))
degreedist <- table(degree(b, cmode = "indegree"))
summary(b ~ triangle)
> summary(b ~ edges + triangle)
summary(b ~ edges + triangle)
load("netModelRdata.Rdata")
rm(list=ls())
curDir = "/home/saeid/R projects/IEEEconf"
setwd(curDir)
ls()
pwd
getwd
getwd()
library(statnet)
adjMatFile = "CA-HepTh(9877)idfixed.Rdata"
load(adjMatFile)
rm(list=ls())
curDir = "/home/saeid/R projects/IEEEconf"
setwd(curDir)
modelFile = "netModelRdata.Rdata"
netModel = load(modelFile)
load("netModelRdata.Rdata")
"This script is in charge of making
doing the ergm simulations"
rm(list=ls())
curDir = "/home/saeid/R projects/IEEEconf"
setwd(curDir)
modelFile = "netModelRdata.Rdata"
load(modelFile)
numOfSim = 100 # number of desired simulations
for (i in 1:numOfSim){
simulatedNet <- simulate(netModel, nsim=1)
simulatedNet <- as.matrix(simulatedNet, matrix.type = 'edgelist')
write.table( simulatedNet, paste(i,"simNet.csv",sep = ""), sep=",",  col.names=FALSE, row.names = FALSE)
print(paste("network number",i,"has successfuly been created"))
rm(simulatedNet)
}
a = simulate(netModel, nsim=1)
simulate(netModel, nsim=1)
"This script is in charge of building the
ergm model"
rm(list=ls())
curDir = "/home/saeid/R projects/IEEEconf"
setwd(curDir)
library(statnet)
adjMatFile = "CA-HepTh(9877)idfixed.Rdata"
load(adjMatFile)
# build the model from the network
start.time <- Sys.time()
netModel <- ergm(net ~ edges + density + triangles + isolates + gwdegree(0.25) + gwdsp + gwesp + gwnsp)
a
"This script is in charge of making
doing the ergm simulations"
rm(list=ls())
curDir = "/home/saeid/R projects/IEEEconf"
setwd(curDir)
modelFile = "netModelRdata.Rdata"
load(modelFile)
numOfSim = 100 # number of desired simulations
for (i in 1:numOfSim){
simulatedNet <- simulate(netModel, nsim=1)
simulatedNet <- as.matrix(simulatedNet, matrix.type = 'edgelist')
write.table( simulatedNet, paste(i,"simNet.csv",sep = ""), sep=",",  col.names=FALSE, row.names = FALSE)
print(paste("network number",i,"has successfuly been created"))
rm(simulatedNet)
}
"This script is in charge of building the
ergm model"
rm(list=ls())
curDir = "/home/saeid/R projects/IEEEconf"
setwd(curDir)
library(statnet)
adjMatFile = "CA-HepTh(9877)idfixed.Rdata"
load(adjMatFile)
# build the model from the network
start.time <- Sys.time()
netModel <- ergm(net ~ edges + density + triangles + isolates + gwdegree(0.25) + gwdsp + gwesp + gwnsp)
end.time <- Sys.time()
save(netModel, file = "netModelRdata.Rdata")
a = simulate(netModel, nsim=1)
rm(a)
numOfSim = 100 # number of desired simulations
for (i in 1:numOfSim){
simulatedNet <- simulate(netModel, nsim=1)
simulatedNet <- as.matrix(simulatedNet, matrix.type = 'edgelist')
write.table( simulatedNet, paste(i,"simNet.csv",sep = ""), sep=",",  col.names=FALSE, row.names = FALSE)
print(paste("network number",i,"has successfuly been created"))
rm(simulatedNet)
}
